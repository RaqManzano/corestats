{
  "hash": "694a753ad62e2715ffebc6faac524507",
  "result": {
    "markdown": "---\ntitle: \"ANOVA\"\nformat:\n  html:\n    toc: true\n    include-after-body:\n      - sync-tabs.html\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Learning outcomes\n\n**Questions**\n\n- How do I analyse multiple samples of continuous data?\n- What is an ANOVA?\n- How do I check for differences between groups?\n\n**Objectives**\n\n- Be able to perform an ANOVA in R\n- Understand the ANOVA output and evaluate the assumptions\n- Understand what post-hoc testing is and how to do this in R\n:::\n\n## Purpose and aim\nAnalysis of variance or ANOVA is a test than can be used when we have multiple samples of continuous response data. Whilst it is possible to use ANOVA with only two samples, it is generally used when we have three or more groups. It is used to find out if the samples came from parent distributions with the same mean. It can be thought of as a generalisation of the two-sample Student’s t-test.\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n::: {.panel-tabset}\n## tidyverse\n\n| Libraries            | Description                                                                                                       |\n|:-----------------------|:-----------------------------------------------|\n| `library(tidyverse)` | A collection of R packages designed for data science                                                              |\n| `library(rstatix)`   | Converts base R stats functions to a tidyverse-friendly format. Also contains extra functionality that we'll use. |\n|`library(ggResidpanel)`|Creates diagnostic plots using `ggplot2`|\n\n|Library| Function| Description|\n|:------------------------|:-------------------------------|:---|\n|`rstatix`| `get_summary_stats()` | Computes summary statistics|\n|`ggResidpanel`|`resid_panel()`| Creates diagnostic plots|\n\n## R\n\n| Function            | Description                                                                                                        |\n|:-----------------------------------|:-----------------------------------|\n|`lm()`| Fits a linear model |\n|`anova()`| Carries out an ANOVA on a linear model ||\n| `qqnorm()`| Plots a Q-Q plot for comparison with a normal distribution.|\n| `qqline()`| Adds a comparison line to the Q-Q plot.|\n| `shapiro.test()`| Performs a Shapiro-Wilk test for normality.|\n\n## Python\n\n| Libraries     | Description                                       |\n|:--------------|:--------------------------------------------------|\n| `plotnine`    | The Python equivalent of `ggplot2`.               |\n| `pandas`      | A Python data analysis and manipulation tool.     |\n| `scipy.stats` | A Python module containing statistical functions. |\n|`statsmodels`  | A Python module for statistical models, conducting tests and statistical data exploration. |\n\n| Functions                       | Description                                                             |\n|:-----------------------------------|:-----------------------------------|\n| `pandas.DataFrame.read_csv`     | Reads in a `.csv` file                                                  |\n| `pandas.DataFrame.head()`       | Plots the first few rows                                                |\n| `pandas.DataFrame.describe()`   | Gives summary statistics                                                |\n| `pandas.DataFrame.groupby()`    | Group DataFrame using a mapper or by a Series of columns                |\n| `pandas.DataFrame.query()`      | Query the columns of a DataFrame with a boolean expression              |\n| `scipy.stats.levene()`          | Performs Levene's test for equality of variance|\n:::\n:::\n\n## Data and hypotheses\nFor example, suppose we measure the feeding rate of oyster catchers (shellfish per hour) at three sites characterised by their degree of shelter from the wind, imaginatively called `exposed` (E), `partially sheltered` (P) and `sheltered` (S). We want to test whether the data support the hypothesis that feeding rates don’t differ between locations. We form the following null and alternative hypotheses:\n\n-\t$H_0$: The mean feeding rates at all three sites is the same $\\mu E = \\mu P = \\mu S$\n-\t$H_1$: The mean feeding rates are not all equal.\n\nWe will use a one-way ANOVA test to check this.\n\n-\tWe use a **one-way** ANOVA test because we only have one predictor variable (the categorical variable location).\n-\tWe’re using **ANOVA** because we have more than two groups and we don’t know any better yet with respect to the exact assumptions.\n\nThe data are stored in the file `data/CS2-oystercatcher.csv`.\n\n## Summarise and visualise\n\n::: {.panel-tabset}\n## tidyverse\nFirst we read in the data.\n\n::: {.cell}\n\n```{.r .cell-code}\n# load data\noystercatcher <- read_csv(\"data/CS2-oystercatcher-feeding.csv\")\n\n# and have a look\noystercatcher\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 2\n   site    feeding\n   <chr>     <dbl>\n 1 exposed    12.2\n 2 exposed    13.1\n 3 exposed    17.9\n 4 exposed    13.9\n 5 exposed    14.1\n 6 exposed    18.4\n 7 exposed    15.0\n 8 exposed    10.3\n 9 exposed    11.8\n10 exposed    12.5\n# … with 110 more rows\n```\n:::\n:::\n\n\nThe `oystercatcher` data set contains two columns:\n\n1. a `site` column with information on the amount of shelter of the feeding location\n2. a `feeding` column containing feeding rates\n\nNext, we get some basic descriptive statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get some basic descriptive statistics\noystercatcher %>% \n  group_by(site) %>% \n  get_summary_stats(type = \"common\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 11\n  site      variable     n   min   max median   iqr  mean    sd    se    ci\n  <chr>     <chr>    <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 exposed   feeding     40  8.35  18.6   13.9  3.40  13.8  2.44 0.386 0.781\n2 partial   feeding     40 10.8   23.0   16.9  2.82  17.1  2.62 0.414 0.838\n3 sheltered feeding     40 18.9   28.5   23.2  3.79  23.4  2.42 0.383 0.774\n```\n:::\n:::\n\n\nFinally, we plot the data by `site`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the data\noystercatcher %>% \n  ggplot(aes(x = site, y = feeding)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs2_practical_anova_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## R\nFirst we read in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load data\noystercatcher_r <- read.csv(\"data/CS2-oystercatcher-feeding.csv\")\n\n# have a look\nhead(oystercatcher_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     site  feeding\n1 exposed 12.17551\n2 exposed 13.07392\n3 exposed 17.93969\n4 exposed 13.89178\n5 exposed 14.05166\n6 exposed 18.36498\n```\n:::\n:::\n\n\nThe `oystercatcher` data set contains two columns:\n\n1. a `site` column with information on the amount of shelter of the feeding location\n2. a `feeding` column containing feeding rates\n\nNext, we get some basic descriptive statistics. We have three groups, so to get the summary statistics by group we do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naggregate(feeding ~ site,\n          data = oystercatcher_r,\n          summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       site feeding.Min. feeding.1st Qu. feeding.Median feeding.Mean\n1   exposed     8.350801       12.184961      13.946420    13.822899\n2   partial    10.795969       15.601927      16.927683    17.081666\n3 sheltered    18.856999       21.403028      23.166246    23.355503\n  feeding.3rd Qu. feeding.Max.\n1       15.581748    18.560404\n2       18.416708    23.021250\n3       25.197096    28.451252\n```\n:::\n:::\n\n\nFinally, we plot the data by `site`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the data by site\nboxplot(feeding ~ site,\n        data = oystercatcher_r)\n```\n\n::: {.cell-output-display}\n![](cs2_practical_anova_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Python\nFirst, we read in the data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# load the data\noystercatcher_py = pd.read_csv(\"data/CS2-oystercatcher-feeding.csv\")\n\n# and have a look\noystercatcher_py.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      site    feeding\n0  exposed  12.175506\n1  exposed  13.073917\n2  exposed  17.939687\n3  exposed  13.891783\n4  exposed  14.051663\n```\n:::\n:::\n\n\nThe `oystercatcher_py` data set contains two columns:\n\n1. a `site` column with information on the amount of shelter of the feeding location\n2. a `feeding` column containing feeding rates\n\nNext, we get some basic descriptive statistics *per group*. Here we use the `pd.groupby()` function to group by `site`. We only want to have summary statistics for the `feeding` variable, so we specify that as well:\n\n\n::: {.cell}\n\n```{.python .cell-code}\noystercatcher_py.groupby(\"site\")[\"feeding\"].describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           count       mean       std  ...        50%        75%        max\nsite                                   ...                                 \nexposed     40.0  13.822899  2.441974  ...  13.946420  15.581748  18.560404\npartial     40.0  17.081666  2.619906  ...  16.927683  18.416708  23.021250\nsheltered   40.0  23.355503  2.419825  ...  23.166246  25.197096  28.451252\n\n[3 rows x 8 columns]\n```\n:::\n:::\n\n\nFinally, we plot the data:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# plot the data\n(\n  ggplot(oystercatcher_py,\n    aes(x = \"site\", y = \"feeding\"))\n    + geom_boxplot()\n)\n```\n\n::: {.cell-output-display}\n![](cs2_practical_anova_files/figure-html/unnamed-chunk-11-1.png){width=614}\n:::\n:::\n\n\n:::\n\nLooking at the data, there appears to be a noticeable difference in feeding rates between the three sites. We would probably expect a reasonably significant statistical result here.\n\n## Assumptions\nTo use an ANOVA test, we have to make three assumptions:\n\n1.\tThe parent distributions from which the samples are taken are normally distributed\n2.\tEach data point in the samples is independent of the others\n3.\tThe parent distributions should have the same variance\n\nIn a similar way to the two-sample tests we will consider the normality and equality of variance assumptions both using tests and by graphical inspection (and ignore the independence assumption).\n\n### Normality\n\nFirst we perform a Shapiro-Wilk test on each site separately.\n\n::: {.panel-tabset}\n## tidyverse\n\nWe take the data, and `group_by()` site:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shapiro-Wilk test on each site\noystercatcher %>% \n  group_by(site) %>% \n  shapiro_test(feeding)\n```\n:::\n\n\n## R\nUnstack the data and perform a Shapiro-Wilk test on each group separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new object (a list) that contains the unstacked data\nuns_oystercatcher <- unstack(oystercatcher_r,\n                             form = feeding ~ site)\n# have a look at the data\nhead(uns_oystercatcher)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   exposed  partial sheltered\n1 12.17551 15.20345  23.87176\n2 13.07392 16.53239  21.41133\n3 17.93969 13.64547  22.46681\n4 13.89178 23.02125  23.00843\n5 14.05166 20.39774  27.85932\n6 18.36498 14.03391  22.09400\n```\n:::\n:::\n\n\nNext, we perform the Shapiro-Wilk test on each group:\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(uns_oystercatcher$exposed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  uns_oystercatcher$exposed\nW = 0.98859, p-value = 0.953\n```\n:::\n\n```{.r .cell-code}\nshapiro.test(uns_oystercatcher$partial)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  uns_oystercatcher$partial\nW = 0.98791, p-value = 0.9398\n```\n:::\n\n```{.r .cell-code}\nshapiro.test(uns_oystercatcher$sheltered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  uns_oystercatcher$sheltered\nW = 0.97511, p-value = 0.5136\n```\n:::\n:::\n\n\n## Python\n\nWe use the `pg.normality()` function to calculate the statistic. This requires:\n\n* the `dv` dependent variable (`feeding` in our case)\n* the `group` variable (`site`)\n* and some data\n\n\n::: {.cell}\n\n```{.python .cell-code}\npg.normality(dv = \"feeding\",\n             group = \"site\",\n             data = oystercatcher_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  W      pval  normal\nexposed    0.988587  0.953037    True\npartial    0.987907  0.939830    True\nsheltered  0.975106  0.513547    True\n```\n:::\n:::\n\n:::\n\nWe can see that all three groups appear to be normally distributed which is good.\n\nFor ANOVA however, considering each group in turn is often considered quite excessive and, in most cases, it is sufficient to consider the normality of the combined set of _residuals_ from the data. We’ll explain residuals properly in the [next session](#cs3-intro) but effectively they are the difference between each data point and its group mean. The residuals can be obtained directly from a linear model fitted to the data.\n\nSo, we create a linear model, extract the residuals and check their normality:\n\n::: {.panel-tabset}\n## tidyverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the model\nlm_oystercatcher <- lm(feeding ~ site,\n                       data = oystercatcher)\n\n# extract the residuals\nresid_oyster <- residuals(lm_oystercatcher)\n\n# perform Shapiro-Wilk test on residuals\nresid_oyster %>% \n  shapiro_test()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  variable statistic p.value\n  <chr>        <dbl>   <dbl>\n1 .            0.994   0.857\n```\n:::\n:::\n\n\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the model\nlm_oystercatcher_r <- lm(feeding ~ site,\n                         data = oystercatcher_r)\n\n# extract the residuals\nresid_oyster_r <- residuals(lm_oystercatcher_r)\n\n# perform Shapiro-Wilk test on residuals\nshapiro.test(resid_oyster_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  resid_oyster_r\nW = 0.99355, p-value = 0.8571\n```\n:::\n:::\n\n\n## Python\nUnfortunately `pingouin` does not have a straightforward way of extracting residuals (if you know more, please raise an issue!).\n\nSo we need to do some statistical gymnastics to get the residuals. I would suggest that you don't worry about the code, just run it and look at the output!\n\n::: {.callout-note collapse=\"true\"}\n## Technical details (optional)\nWe need to import a few extra modules. First, we load the `statsmodels.api` module, which contains an `OLS()` function (Ordinary Least Squares - the equivalent of the `lm()` function in R).\n\nWe also import `stats.models.formula.api` so we can use the formula notation in our linear model. We define the formula as `formula= \"feeding ~ C(site)\"` with `C` conveying that the `site` variable is a category. Lastly we can `.fit()` the model.\n\nIf you're familiar with this stuff then you can look at the model itself by running `summary(lm_oystercatcher_py)`. But we'll cover all of this in later sessions.\n:::\n\nEventually, we get the residuals from the linear model with `.resid`. \n\n::: {.cell}\n\n```{.python .cell-code}\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# create a linear model\nmodel = smf.ols(formula= \"feeding ~ C(site)\", data = oystercatcher_py)\n# and get the fitted parameters of the model\nlm_oystercatcher_py = model.fit()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# get the residuals from the model fit\n# and perform Shapiro-Wilk test\npg.normality(lm_oystercatcher_py.resid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          W     pval  normal\n0  0.993546  0.85703    True\n```\n:::\n:::\n\n\n:::\n\nAgain, we can see that the combined residuals from all three groups appear to be normally distributed (which is as we would have expected given that they were all normally distributed individually!)\n\n### Equality of Variance\n\nWe now test for equality of variance using Bartlett’s test (since we’ve just found that all of the individual groups are normally distributed).\n\nPerform Bartlett’s test on the data:\n\n::: {.panel-tabset}\n## tidyverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check equality of variance\nbartlett.test(feeding ~ site,\n              data = oystercatcher)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tBartlett test of homogeneity of variances\n\ndata:  feeding by site\nBartlett's K-squared = 0.29598, df = 2, p-value = 0.8624\n```\n:::\n:::\n\n\nWhere the relevant p-value is given on the 3rd line. Here we see that each group appears to have the same variance.\n\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\n# check equality of variance\nbartlett.test(feeding ~ site,\n              data = oystercatcher)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tBartlett test of homogeneity of variances\n\ndata:  feeding by site\nBartlett's K-squared = 0.29598, df = 2, p-value = 0.8624\n```\n:::\n:::\n\n\nWhere the relevant p-value is given on the 3rd line. Here we see that each group appears to have the same variance.\n\n## Python\nWe use the `homoscedasticity()` function from `pingouin` (homoscedasticity is another way of describing equality of variance). The default `method` is `levene`, so we need to specify that we want to use `bartlett`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\npg.homoscedasticity(dv = \"feeding\",\n                    group = \"site\",\n                    method = \"bartlett\",\n                    data = oystercatcher_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 T      pval  equal_var\nbartlett  0.295983  0.862439       True\n```\n:::\n:::\n\n\nWhere the relevant p-value is given in the `pval` column. Here we see that each group appears to have the same variance.\n:::\n\n### Graphical interpretation and diagnostic plots\n\nAssessing assumptions via these tests can be cumbersome, but also a bit misleading at times. It reduces the answer to the question \"is the assumption met?\" to a yes/no, based on some statistic and associated p-value.\n\nThis does not convey that things aren't always so clear-cut and that there is a lot of grey area that we need to navigate. As such, assessing assumptions through graphical means - using diagnostic plots - is often preferred.\n\n::: {.panel-tabset}\n## tidyverse\nIn the first session we already created diagnostic Q-Q plots directly from our data, using `stat_qq()` and `stat_qq_line()`. For more specific plots this becomes a bit cumbersome. There is an option to create ggplot-friendly diagnostic plots, using the `ggResidPanel` package.\n\nLet's create the diagnostic plots we're interested in using `ggResidPanel`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_oystercatcher %>% \n    resid_panel(plots = c(\"resid\", \"qq\", \"ls\", \"cookd\"),\n              smoother = TRUE)\n```\n\n::: {.cell-output-display}\n![](cs2_practical_anova_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n*\tThe top left graph plots the **Residuals plot**. If the data are best explained by a linear line then there should be a uniform distribution of points above and below the horizontal blue line (and if there are sufficient points then the red line, which is a smoother line, should be on top of the blue line). This plot looks pretty good.\n*\tThe top right graph shows the **Q-Q plot** which allows a visual inspection of normality. If the residuals are normally distributed, then the points should lie on the diagonal blue line. This plot looks good.\n*\tThe bottom left **Location-Scale** graph allows us to investigate whether there is any correlation between the residuals and the predicted values and whether the variance of the residuals changes significantly. If not, then the red line should be horizontal. If there is any correlation or change in variance then the red line will not be horizontal. This plot is fine.\n*\tThe last graph shows the **Cook's distance** and tests if any one point has an unnecessarily large effect on the fit. A rule of thumb is that if any value is larger than 1.0, then it might have a large effect on the model. If not, then no point has undue influence. This plot is good. There are different ways to determine the threshold (apart from simply setting it to 1) and in this plot the blue dashed line is at `4/n`, with `n` being the number of samples. At this threshold there are some data points that may be influential, but I personally find this threshold rather strict.  \n\n## R\n\nWe can create the default diagnostic plots in base R by simply plotting the `lm` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a neat 2x2 window\npar(mfrow = c(2,2))\n# create the diagnostic plots\nplot(lm_oystercatcher)\n```\n\n::: {.cell-output-display}\n![](cs2_practical_anova_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# and return the window back to normal\npar(mfrow = c(1,1))\n```\n:::\n\n\nThe second line creates four diagnostic plots.\n\n*\tThe top left graph plots the **Residuals vs Fitted**. If the data are best explained by a linear line then there should be a uniform distribution of points above and below the horizontal red line. This plot looks pretty good.\n*\tThe top right graph shows the **Normal Q-Q plot** which allows a visual inspection of normality. If the residuals are normally distributed, then the points should lie on the diagonal dotted line. This plot looks good.\n*\tThe bottom left **Scale-Location** graph allows us to investigate whether there is any correlation between the residuals and the predicted values and whether the variance of the residuals changes significantly. If not, then the red line should be horizontal. If there is any correlation or change in variance then the red line will not be horizontal. This plot is fine.\n* The bottom right **Residuals vs Factor Levels** plot shows the residuals for each group (= site). This plot is only displayed if there are equal number of observations in each group and we'll explain more about this in the next session.\n\n## Python\nUnfortunately Python doesn't provide a convenient way of displaying the same diagnostic plots as R does.\n\nI created a function `dgplots()` (which stands for Diagnostic Plots, very original I know...) that does this for you. All you need to do is create a linear model, get the fit and feed that to the `dgplots()` function.\n\nYou can of course plot the model values yourself by extracting them from the linear model fit, but this should provide a convenient way to avoid that kind of stuff.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndgplots(lm_oystercatcher_py)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/dgplots/2022_08_07-01:07:03_pm_dgplots.png){width=775}\n:::\n:::\n\n*\tThe top left graph plots the **Residuals plot**. If the data are best explained by a linear line then there should be a uniform distribution of points above and below the horizontal blue line (and if there are sufficient points then the red line, which is a smoother line, should be on top of the blue line). This plot looks pretty good.\n*\tThe top right graph shows the **Q-Q plot** which allows a visual inspection of normality. If the residuals are normally distributed, then the points should lie on the diagonal blue line. This plot looks good.\n*\tThe bottom left **Location-Scale** graph allows us to investigate whether there is any correlation between the residuals and the predicted values and whether the variance of the residuals changes significantly. If not, then the red line should be horizontal. If there is any correlation or change in variance then the red line will not be horizontal. This plot is fine.\n*\tThe last graph shows the **Influential points** and tests if any one point has an unnecessarily large effect on the fit. Here we're using the Cook's distance as a measure. A rule of thumb is that if any value is larger than 1.0, then it might have a large effect on the model. If not, then no point has undue influence. This plot is good. There are different ways to determine the threshold (apart from simply setting it to 1) and in this plot the blue dashed line is at `4/n`, with `n` being the number of samples. At this threshold there are some data points that may be influential, but I personally find this threshold rather strict.  \n:::\n\nWe can see that these graphs are very much in line with what we’ve just looked at using the test, which is reassuring. The groups all appear to have the same spread of data, and the Q-Q plot shows that the assumption of normality is alright.\n\n::: {.callout-important}\n## Assessing assumptions\nAt this stage, I should point out that I nearly always stick with the graphical method for assessing the assumptions of a test. Assumptions are rarely either completely met or not met and there is always some degree of personal assessment.\n\nWhilst the formal statistical tests (like Shapiro-Wilk) are technically fine, they can often create a false sense of things being absolutely right or wrong in spite of the fact that they themselves are still probabilistic statistical tests. In these exercises we are using both approaches whilst you gain confidence and experience in interpreting the graphical output and whilst it is absolutely fine to use both in the future I would strongly recommend that you don’t rely solely on the statistical tests in isolation.\n:::\n\n## Implement and interpret the test\nPerform an ANOVA test on the data:\n\n::: {.panel-tabset}\n## tidyverse\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(lm_oystercatcher)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: feeding\n           Df  Sum Sq Mean Sq F value    Pr(>F)    \nsite        2 1878.02  939.01  150.78 < 2.2e-16 ***\nResiduals 117  728.63    6.23                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThis takes the linear model (i.e. finds the means of the three groups and calculates a load of intermediary data that we need for the statistical analysis) and stores this information in an R object (which we've called `lm_oystercatcher`, but which you can call what you like).\n\nIn the output:\n\n-\tThe 1st line just tells you the that this is an ANOVA test\n-\tThe 2nd line tells you what the response variable is (in this case feeding)\n-\tThe 3rd, 4th and 5th lines are an ANOVA table which contain some useful values:\n    - The `Df` column contains the degrees of freedom values on each row, 2 and 117 (which we can use for the reporting)\n    - The `F` value column contains the F statistic, 150.78 (which again we’ll need for reporting).\n    - The p-value is 2.2e-16 and is the number directly under the `Pr(>F)` on the 4th line (to be precise, it is 4.13e-33 but anything smaller than 2.2e-16 gets reported as `< 2.2e-16`).\n    - The other values in the table (in the `Sum Sq` and `Mean Sq`) columns are used to calculate the F statistic itself and we don’t need to know these.\n-\tThe 6th line has some symbolic codes to represent how big (small) the p-value is; so, a p-value smaller than 0.001 would have a *** symbol next to it (which ours does). Whereas if the p-value was between 0.01 and 0.05 then there would simply be a * character next to it, etc. Thankfully we can all cope with actual numbers and don’t need a short-hand code to determine the reporting of our experiments (please tell me that’s true…!)\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(lm_oystercatcher_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: feeding\n           Df  Sum Sq Mean Sq F value    Pr(>F)    \nsite        2 1878.02  939.01  150.78 < 2.2e-16 ***\nResiduals 117  728.63    6.23                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThis takes the linear model (i.e. finds the means of the three groups and calculates a load of intermediary data that we need for the statistical analysis) and stores this information in an R object (which we've called `lm_oystercatcher_r`, but which you can call what you like).\n\nIn the output:\n\n-\tThe 1st line just tells you the that this is an ANOVA test\n-\tThe 2nd line tells you what the response variable is (in this case feeding)\n-\tThe 3rd, 4th and 5th lines are an ANOVA table which contain some useful values:\n- The `Df` column contains the degrees of freedom values on each row, 2 and 117 (which we can use for the reporting)\n- The `F` value column contains the F statistic, 150.78 (which again we’ll need for reporting).\n- The p-value is 2.2e-16 and is the number directly under the `Pr(>F)` on the 4th line (to be precise, it is 4.13e-33 but anything smaller than 2.2e-16 gets reported as `< 2.2e-16`).\n- The other values in the table (in the `Sum Sq` and `Mean Sq`) columns are used to calculate the F statistic itself and we don’t need to know these.\n-\tThe 6th line has some symbolic codes to represent how big (small) the p-value is; so, a p-value smaller than 0.001 would have a *** symbol next to it (which ours does). Whereas if the p-value was between 0.01 and 0.05 then there would simply be a * character next to it, etc. Thankfully we can all cope with actual numbers and don’t need a short-hand code to determine the reporting of our experiments (please tell me that’s true…!)\n\n## Python\n\nThere are different ways of conducting an ANOVA in Python, with `scipy.stats` [proving an option](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html).\nHowever, I find that [anova()](https://pingouin-stats.org/generated/pingouin.anova.html#pingouin.anova) function in `pingouin` provides the easiest and most-detailed option to do this.\n\nIt takes the following arguments:\n\n* `dv`: dependent variable (response variable; in our case `feeding`)\n* `between`: between-subject factor (predictor variable; in our case `site`)\n* `data`: which function doesn't!?\n* `detailed`: optional `True` or `False`, we're setting it to `True` because we like to know what we're doing!\n\n\n::: {.cell}\n\n```{.python .cell-code}\npg.anova(dv = \"feeding\",\n         between = \"site\",\n         data = oystercatcher_py,\n         detailed = True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Source           SS   DF          MS           F         p-unc       np2\n0    site  1878.015371    2  939.007685  150.782449  4.128088e-33  0.720473\n1  Within   728.625249  117    6.227566         NaN           NaN       NaN\n```\n:::\n:::\n\n\nThis creates a linear model based on the data, _i.e_. finds the means of the three groups and calculates a load of intermediary data that we need for the statistical analysis.\n\nIn the output:\n\n* `Source`: Factor names - in our case these are the different sites (`site`)\n* `SS`: Sums of squares (we'll get to that in a bit)\n* `DF`: Degrees of freedom (at the moment only used for reporting)\n* `MS`: Mean squares\n* `F`: Our F-statistic\n* `p-unc`: p-value (`unc` stands for \"uncorrected\" - more on multiple testing correction later)\n* `np2`: Partial eta-square effect sizes (more on this later)\n:::\n\nAgain, the p-value is what we’re most interested in here and shows us the probability of getting samples such as ours if the null hypothesis were actually true.\n\nSince the p-value is very small (much smaller than the standard significance level of 0.05) we can say \"that it is very unlikely that these three samples came from the same parent distribution\" and as such we can reject our null hypothesis and state that:\n\n> A one-way ANOVA showed that the mean feeding rate of oystercatchers differed significantly between locations (F = 150.78, df = 2, 117, p = 4.13e-33).\n",
    "supporting": [
      "cs2_practical_anova_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}