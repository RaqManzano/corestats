---
title: "Kruskal-Wallis"
---

```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup_files/setup.R")
```

```{python}
#| echo: false
#| message: false
exec(open('setup_files/setup.py').read())
```

::: callout-tip
## Learning outcomes

**Questions**

-   How do I analyse multiple samples of continuous data if the data are not normally distributed?
-   What is a Kruskal-Wallis test?
-   How do I check for differences between groups?

**Objectives**

-   Be able to perform an Kruskal-Wallis test in R
-   Understand the output of the test and evaluate the assumptions
-   Be able to perform post-hoc testing after a Kruskal-Wallis test
:::

## Purpose and aim

The Kruskal-Wallis one-way analysis of variance test is an analogue of ANOVA that can be used when the assumption of normality cannot be met. In this way it is an extension of the Mann-Whitney test for two groups.

## Libraries and functions

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## tidyverse

### Libraries

```{r}
#| eval: false
# A collection of R packages designed for data science
library(tidyverse)

# Converts stats functions to a tidyverse-friendly format
library(rstatix)

# Creates diagnostic plots using ggplot2
library(ggResidpanel)
```

### Functions

```{r}
#| eval: false
#| warning: false
# Performs a Kruskal-Wallis test
rstatix::kruskal_test()

# Performs Dunn's test for pairwise multiple comparisons of the ranked data
rstatix::dunn_test()
```

## R

### Libraries

```{r}
#| eval: false
#| warning: false
# Library for performing Dunn's test
library(dunn.test)
```

### Functions

```{r}
#| eval: false
#| warning: false
# Performs a Kruskal-Wallis test
stats::kruskal.test()

# Performs Dunn's test for pairwise multiple comparisons of the ranked data
dunn.test::dunn.test()
```

## Python
:::
:::

## Data and hypotheses

For example, suppose a behavioural ecologist records the rate at which [spider monkeys](https://en.wikipedia.org/wiki/Spider_monkey) behaved aggressively towards one another as a function of closely related the two monkeys are. The familiarity of the two monkeys involved in each interaction is classified as `high`, `low` or `none.` We want to test if the data support the hypothesis that aggression rates differ according to strength of relatedness. We form the following null and alternative hypotheses:

-   $H_0$: The median aggression rates for all types of familiarity are the same
-   $H_1$: The median aggression rates are not all equal

We will use a Kruskal-Wallis test to check this.

The data are stored in the file `data/CS2-spidermonkey.csv`.

## Summarise and visualise

::: {.panel-tabset group="language"}
## tidyverse

First we read the data in:

```{r}
#| message: false
#| warning: false
spidermonkey <- read_csv("data/CS2-spidermonkey.csv")
```

```{r}
# look at the data
spidermonkey

# summarise the data
spidermonkey %>% 
  select(-id) %>% 
  group_by(familiarity) %>% 
  get_summary_stats(type = "common")

# create boxplot
spidermonkey %>% 
  ggplot(aes(x = familiarity, y = aggression)) +
  geom_boxplot()
```

## R

First we read the data in:

```{r}
spidermonkey <- read.csv("data/CS2-spidermonkey.csv")
```

```{r}
# look at the data format
head(spidermonkey)

# summarise the data
aggregate(aggression ~ familiarity, data = spidermonkey, summary)

# create boxplot
boxplot(aggression ~ familiarity, data = spidermonkey)
```

## Python
:::

The data appear to show a very significant difference in aggression rates between the three types of familiarity. We would probably expect a reasonably significant result here.

## Assumptions

To use the Kruskal-Wallis test we have to make three assumptions:

1.  The parent distributions from which the samples are drawn have the same shape (if they're normal then we should use a one-way ANOVA)
2.  Each data point in the samples is independent of the others
3.  The parent distributions should have the same variance

Independence we'll ignore as usual. Similar shape is best assessed from the earlier visualisation of the data. That means that we only need to check equality of variance.

### Equality of variance

We test for equality of variance using Levene's test (since we can't assume normal parent distributions which rules out Bartlett's test).

::: {.panel-tabset group="language"}
## tidyverse

```{r}
# perform Levene's test
spidermonkey %>% 
  levene_test(aggression ~ familiarity)
```

The relevant p-value is given in the `p` column (0.893). As it is quite large we see that each group do appear to have the same variance.

There is also a warning about `group coerced to factor`. There is no need to worry about this - Levene's test needs to compare different groups and because `aggression` is encoded as a numeric value, it converts it to a categorical one before running the test.

## R

Levene's test is not included in the default R packages and may require the installation of an additional package called `car` (Companion to Applied Regression).

To install the `car` package, run the following command in your console:

```{r}
#| eval: false
install.packages("car")
```

Alternatively, go to <kbd>Tools</kbd> \> <kbd>Install packages...</kbd> \> <kbd>Packages</kbd>, type in `car` and press <kbd>Install</kbd>

Remember to load the library with `library(car)`.

Perform Levene's test on the data:

```{r}
leveneTest(aggression ~ familiarity, data = spidermonkey)
```

The relevant p-value is given on the 3rd line (`Pr(>F) = 0.893`). As it is quite large we see that each group do appear to have the same variance.

There is also a warning about `group coerced to factor`. There is no need to worry about this - Levene's test needs to compare different groups and because `aggression` is encoded as a numeric value, it converts it to a categorical one before running the test.

## Python
:::

## Implement and interpret the test

Perform a Kruskal-Wallis test on the data:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
# implement Kruskal-Wallis test
spidermonkey %>% 
  kruskal_test(aggression ~ familiarity)
```

-   The `kruskal_test()` takes the formula in the following format: `variable ~ category`

The p-value is given in the `p` column. This shows us the probability of getting samples such as ours if the null hypothesis were actually true.

## R

```{r}
kruskal.test(aggression ~ familiarity, data = spidermonkey)
```

-   The first argument must be in the formula format: `variable ~ category`
-   If the data are stored in stacked format, then the second argument must be the name of the data frame

The p-value is given in the 3rd line. This shows us the probability of getting samples such as ours if the null hypothesis were actually true.

## Python
:::

Since the p-value is very small (much smaller than the standard significance level of 0.05) we can say "that it is very unlikely that these three samples came from the same parent distribution and as such we can reject our null hypothesis" and state that:

> A one-way Kruskal-Wallis rank sum test showed that aggression rates between spidermonkeys depends upon the degree of familiarity between them (KW = 13.597, df = 2, p = 0.0011).

## Post-hoc testing (Dunn's test)

The equivalent of Tukey's range test for non-normal data is **Dunn's test**.

Dunn's test is used to check for significant differences in group medians:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
# perform Dunn's test
spidermonkey %>% 
  dunn_test(aggression ~ familiarity)
```

The `dunn_test()` function performs a Kruskal-Wallis test on the data, followed by a post-hoc pairwise multiple comparison.

The comparison between the pairs of groups is reported in the table at the bottom. Each row contains a single comparison. We are interested in the `p` and `p.adj` columns, which contain the the p-values that we want. This table shows that there isn't a significant difference between the high and low groups, as the p-value (0.1598) is too high. The other two comparisons between the high familiarity and no familiarity groups and between the low and no groups are significant though.

The `dunn_test()` function has several arguments, of which the `p.adjust.method` is likely to be of interest. Here you can define which method needs to be used to account for multiple comparisons. The default is `"holm"`. We'll cover more about this in the chapter on [Power analysis](#cs6-intro).

## R

Dunn's test is also not included in the default R packages and may require the installation of an additional package called `dunn.test`.

To install the `dunn.test` package, run the following command in your console:

```{r}
#| eval: false
install.packages("dunn.test")
```

Alternatively, go to <kbd>Tools</kbd> \> <kbd>Install packages...</kbd> \> <kbd>Packages</kbd>, type in `dunn.test` and press <kbd>Install</kbd>

Remember to load the library with `library(dunn.test)`.

Test for a significant difference in group medians:

```{r}
dunn.test(spidermonkey$aggression, spidermonkey$familiarity,
          altp = TRUE)
```

Note that Dunn's test requires us to enter two arguments, the first is the vector of values and the second is the vector containing the category labels (i.e. the factor).

You can see that the `dunn.test()` function also performs a Kruskal-Wallis test on the data, and these results are reported initially.

The comparison between the pairs of groups is reported in the table at the bottom. Each cell in the table has two rows. The bottom row contains the p-values that we want. This table shows that there isn't a significant difference between the high and low groups, as the p-value (0.1598) is too high. The other two comparisons between the high familiarity and no familiarity groups and between the low and no groups are significant though.

## Python
:::

## Exercise: Lobster weight (revisited)

Perform a Kruskal-Wallis test and do a post-hoc test on the `lobster` data set.

::: {.callout-tip collapse="true"}
## Answer

### Hypothesis

-   $H_0$ : all medians are equal
-   $H_1$ : not all medians are equal

### Import data, summarise and visualise

::: {.panel-tabset group="language"}
## tidyverse

```{r}
#| echo: false
#| message: false
#| warning: false
# load the data in the background
lobsters <- read_csv("data/CS2-lobsters.csv")
```

All done previously.

## R

```{r}
#| echo: false
lobsters <- read.csv("data/CS2-lobsters.csv")
```

All done previously.

## Python
:::

### Assumptions

From before, since the data are normal enough they are definitely similar enough for a Kruskal-Wallis test and they do all have equality of variance from out assessment of the diagnostic plots. For completeness though we will look at Levene's test.

::: {.panel-tabset group="language"}
## tidyverse

```{r}
#| warning: false
lobsters %>% 
  levene_test(weight ~ diet)
```

## R

```{r}
#| warning: false
leveneTest(weight ~ diet, data = lobsters)
```

## Python
:::

Given that the p-value is so high, this again agrees with our previous assessment that the equality of variance assumption is well met. Rock on.

### Kruskal-Wallis test

So, we perform the Kruskall-Wallis test.

::: {.panel-tabset group="language"}
## tidyverse

```{r}
# implement Kruskal-Wallis test
lobsters %>% 
  kruskal_test(weight ~ diet)
```

## R

```{r}
kruskal.test(weight ~ diet, data = lobsters)
```

## Python
:::

> A Kruskal-Wallis test indicated that the median weight of juvenile lobsters did not differ significantly between diets (KW = 3.26, df = 2, p = 0.20).

### Post-hoc testing

In this case we should not be doing any post-hoc testing, because we did not detect any statistically significant differences. Doing so anyway and then reporting any incidental groups that *would* differ, would be p-hacking.
:::

## Key points

::: callout-note
-   We use a Kruskal-Wallis test to see if there is a difference in medians between multiple continuous response variables
-   We assume parent distributions have the same shape; each data point is independent and the parent distributions have the same variance
-   We test for equality of variance using Levene's test
-   Post-hoc testing to check for significant differences in the group medians is done with Dunn's test
:::
