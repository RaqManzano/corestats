---
title: "area_51"
execute:
    echo: false
jupyter: python3
---

```{python}
import pandas as pd
from plotnine import *
import statsmodels.formula.api as smf
import patchworklib as pw
from plotnine.data import *
```

```{python}
oystercatcher_py = pd.read_csv("data/CS2-oystercatcher-feeding.csv")
```

```{python}
# define the model
model = smf.ols(formula= "feeding ~ C(site)", data = oystercatcher_py)
# fit the model
results = model.fit()
```

```{python}
# get relevant variables from model
residuals = results.resid.rename("residuals")
fitted_values = results.fittedvalues.rename("fitted_values")
std_resid = pd.Series(results.resid_pearson).rename("std_resid")
influence = results.get_influence()
cooks_d = pd.Series(influence.cooks_distance[0]).rename("cooks_d")
leverage = pd.Series(influence.hat_matrix_diag).rename("leverage")
obs = pd.Series(range(len(residuals))).rename("obs")
n_obs = len(obs.index)
```

```{python}
# combine Series into DataFrame
model_values = residuals.to_frame().join(fitted_values).join(std_resid).join(cooks_d).join(leverage).join(obs)

model_values["n_obs"] = n_obs
```

## Q-Q plot
```{python}
(
  ggplot(model_values, aes(sample = "residuals"))
  + stat_qq()
  + stat_qq_line(colour = "blue")
)
```


## Residual plot
```{python}
(
    ggplot(model_values, aes(x = "fitted_values", y = "residuals"))
    + geom_point()
    + geom_smooth(se = False, colour = "red")
)
```

## Location-Scale plot
```{python}
(
    ggplot(model_values, aes(x = "fitted_values", y = "std_resid"))
    + geom_point()
    + geom_smooth(se = False, colour = "red")
)
```

## Cook's distance
```{python}
(
    ggplot(model_values, aes(x = "obs", y = "cooks_d"))
    + geom_point()
    + geom_segment(aes(xend = "obs", yend = 0), colour = "blue")
    + geom_hline(aes(yintercept = 0))
    + geom_hline(aes(yintercept = 4/n_obs), colour = "blue", linetype = "dashed")
)
```

```{python}
p1 = (
    ggplot(model_values, aes(x = "fitted_values", y = "residuals"))
    + geom_point()
    + geom_smooth(se = False, colour = "red")
)

p2 = (
  ggplot(model_values, aes(sample = "residuals"))
  + stat_qq()
  + stat_qq_line(colour = "blue")
)

p3 = (
    ggplot(model_values, aes(x = "fitted_values", y = "std_resid"))
    + geom_point()
    + geom_smooth(se = False, colour = "red")
)

p4 = (
    ggplot(model_values, aes(x = "obs", y = "cooks_d"))
    + geom_point()
    + geom_segment(aes(xend = "obs", yend = 0), colour = "blue")
    + geom_hline(aes(yintercept = 0))
    + geom_hline(aes(yintercept = 4/n_obs), colour = "blue", linetype = "dashed")
)

p1 = pw.load_ggplot(p1, figsize=(3,2))
p2 = pw.load_ggplot(p2, figsize=(3,2))
p3 = pw.load_ggplot(p3, figsize=(3,2))
p4 = pw.load_ggplot(p4, figsize=(3,2))

dplots = (p1 | p2) / (p3 | p4)
dplots.savefig()
```

```{python}
from dgplots import dgplots
```

```{python}
dgplots(results)
```

